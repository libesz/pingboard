// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// static statically implements the virtual filesystem provided to vfsgen.
var static = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 1, 2, 14, 58, 25, 783074520, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2020, 1, 2, 15, 3, 3, 419299881, time.UTC),
			uncompressedSize: 2689,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xdb\x36\x10\x7f\x0f\x90\xef\x70\xe5\x8b\x65\x14\x15\x83\x75\x0f\x45\x2a\x79\x98\xed\x00\x0b\xd0\x6c\x01\xe2\xa0\x28\xb6\x3d\x50\xe2\xd9\xe1\x2a\x93\x02\x49\x49\xf5\x86\x7c\xb2\x3d\xec\x23\xed\x2b\x0c\xd4\xbf\xca\x15\x95\x7a\x5b\xf8\x62\x99\x3c\xdd\xdd\xef\x77\xc7\x9f\xee\xef\x3f\xff\x8a\x5e\xac\x7f\x5a\x6d\x3e\xdc\x5e\xc1\x0f\x9b\x9b\x77\x70\x7b\xbf\x7c\x77\xbd\x02\xf2\x8a\xd2\xf7\xaf\x57\x94\xae\x37\xeb\xe6\xe0\xdb\xf0\x02\x36\x9a\x49\x23\xac\x50\x92\x65\x94\x5e\xfd\x48\x16\xe7\x67\xd1\x83\xdd\x67\x8b\xf3\x33\x00\x80\xe8\x01\x19\x6f\x9f\xeb\xff\x56\xd8\x0c\x17\xb7\x42\xee\x96\x8a\x69\x1e\xd1\x66\x63\x60\x61\x52\x2d\x72\x0b\xf6\x90\x63\x4c\x2c\x7e\xb2\xf4\x37\x56\xb2\x66\x97\x0c\x0c\xdd\x2a\x99\x06\xa9\xee\x8a\x3c\x57\xda\xde\xa0\x31\x6c\x87\x10\x03\xf9\xa0\x0a\x0d\x89\x56\x95\x41\x0d\x29\x93\x52\x59\x30\x8d\x15\xbc\xc7\xe4\x4e\xa5\x1f\xd1\xbe\x20\x6f\xc7\xde\x2a\xf3\xf6\xfc\xec\x78\x7b\x5b\xc8\xd4\x21\x04\x96\xe7\x28\x79\x1b\x26\xd8\x37\xbf\x73\xf8\xe3\xd8\xdc\x2d\xae\xd2\x62\x8f\xd2\x86\x3b\xb4\x57\x19\xba\xc7\xe5\xe1\x9a\x07\x24\x53\x3b\x32\x0f\x1b\x47\x9d\x87\x97\xe4\x17\x49\xe6\x5f\xe4\xf2\x38\x99\x45\xaa\xa4\xc4\xd4\x36\x18\xee\x50\x97\xa8\x03\x6f\x12\x0e\x4e\x07\x3a\x06\x72\xa3\x7e\xef\xa1\x13\x10\x12\x2a\x21\xb9\xaa\xe0\x3b\x98\x0d\x8f\x66\x70\x09\x01\x99\xb2\x3c\x32\x93\x45\x96\xcd\x47\x74\xb9\x25\xb6\x10\xf4\xa1\xe3\xc6\xd0\x97\xa2\x5b\xc7\xac\x8e\xaa\xf9\x12\x7c\xf4\x74\x4b\xa3\x2d\xb4\xf4\x1c\x8e\xf8\x1b\x87\x22\xab\x86\x49\x21\x77\x5e\xff\x95\x81\x18\x24\x56\x2d\xfc\x9f\x5b\x40\xbf\x06\xb3\xca\x5c\x52\x9a\xa9\x94\x65\x0f\xca\xd8\xcb\x6f\x2e\x2e\x5e\x53\x53\xee\x66\x7e\x2f\x61\x22\x24\xd3\x87\xcd\x21\xaf\x7b\x93\x69\xcd\x0e\x49\xb1\xdd\xa2\x26\x5e\xf2\x2a\x13\x2a\xb9\xef\x9b\xb9\x2f\x7c\x80\xa5\x9d\x64\xd1\x31\x8e\xa5\x0d\x39\xb3\x6c\xd2\x68\xcc\xc1\xec\x3e\xe7\xcc\x22\xf7\xa6\xde\x2d\xae\x59\x75\xbd\x77\xe6\x7d\x84\x09\xeb\x47\x4f\x21\xa6\x31\xaa\x1c\xe5\x11\xc0\x13\x7b\x64\xd6\x16\xee\x89\xb4\x27\x2f\x60\x7b\x7b\x96\x85\xb5\x4a\x92\x79\xc8\x85\x61\x49\x86\x1c\x62\xb0\xba\xc0\x7f\xe9\x8d\x0b\xf3\x84\xc3\x2d\xcb\x8c\xc7\xe3\x13\x8c\xa4\x99\x32\xf8\x9f\x28\x59\xf7\x99\x3c\x33\x2b\x13\x20\xfe\x07\x2d\x7e\x9e\x1f\x4f\xd5\xbf\xcf\xce\x7b\x31\xf2\xb3\xe4\xae\x44\x65\x26\x09\xac\x4c\x58\xd3\x1d\xf8\xd8\x3a\x39\x9b\xd3\x52\x79\xbe\x76\xf4\xaa\xff\xd7\xbe\x1d\x8d\x80\x85\x4a\x66\x8a\xf1\xaf\xb7\xd7\x18\xd3\xc9\xb5\xe9\x95\x62\x52\x87\xdc\x57\x29\x39\x58\xfc\xde\xc9\x60\x2b\xb0\xf7\x42\xda\x37\xf5\x46\x30\xa5\x2e\xee\x35\x2e\x4a\x88\x27\xb9\x9c\x89\xbd\x5f\x81\xdd\xab\x28\xd3\x36\xd6\x06\x3f\xd9\x35\xa6\x8a\xa3\x0e\x48\x61\xb7\xaf\xde\x78\xc5\x9f\x8b\x32\x14\x52\xa2\xae\x47\x9d\x18\x98\x55\x49\x80\x32\x0d\x79\xfd\x6e\x93\xe7\x98\x17\xf7\x13\xd1\x66\x58\xe9\x46\x20\x3a\x98\x81\xa2\x44\xf1\xc3\x70\xda\x11\x32\x2f\xba\x61\x27\x69\xba\x00\x04\x8f\xbf\x68\x0c\x28\x59\x56\x60\xdc\x7d\xb1\x08\x38\xa9\x10\xe9\xc7\xde\x6e\x50\x2b\x42\x17\x70\x42\x80\xd1\x1d\xed\x62\x7c\x56\x92\x41\x18\xef\xa5\x23\x74\x88\xc4\x55\xc7\x39\x16\xfb\x1d\x59\x44\x94\x8b\x72\x78\x9a\x6b\xac\x4f\xdd\x00\xb4\x88\x68\xae\xb1\xa7\xa7\xa5\x24\xa2\xf5\xdc\xf8\x4f\x00\x00\x00\xff\xff\x65\xcf\x6a\x39\x81\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
